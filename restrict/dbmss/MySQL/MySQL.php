<?php
	class MySQL{
		public $attType= Array();
		public function __construct()
		{
			$this->attType= Array();
			$this->defaultPort= '3306';
			$this->attType['key']		= "integer auto_increment not null";
			$this->attType['varchar']	= "varchar(<length>)";
			$this->attType['char']		= "char(<length>)";
			$this->attType['text']		= "text";
			$this->attType['date']		= "timestamp";
			$this->attType['blob']		= "blob";
			$this->attType['integer']	= "integer";
			$this->attType['bigint']	= "bigint";
			$this->attType['smallint']	= "smallint";
			$this->attType['int']		= "integer";
			$this->attType['time']		= "timestamp";
			$this->attType['dateTime']	= "timestamp";
			$this->attType['float']		= "double";
			$this->attType['boolean']	= "tinyint";
			$this->attType['serial']	= "auto_increment";
		}
		public function header()
		{
			return "<mindComment>/*####################################################</mindComment>
<mindComment>#   Generated by Mind                                #</mindComment>
<mindComment>#   Developed by Felipe Nascimento de Moura / 2008   #</mindComment>
<mindComment>#   Generate MySQL DataBase SQLs                     #</mindComment>
<mindComment>######################################################*/</mindComment>
<obj>USE</obj> <element><databasename></element>;
";
		}
		
		public function createConnection()
		{
			return "function connectToMySQL()
					{
						\$connection= mysql_connect('<host>:<port>', '<user>', '<pwd>');
						\$db_selected = mysql_select_db('<dbname>', \$connection);
						return \$connection;
					}";
		}
		public function query($dbCon, $qr)
		{
			//$qr= substr($qr, 0, strrpos($qr, ';'));
			$qr= preg_split('/\/\* SQL: table .*\*\//', $qr);
			//print_r($qr);
			//$qr= preg_replace('/USE .*;/', '', $qr);
			//echo $qr;
			for($i=1; $i<count($qr); $i++)
			{
				//echo $qr[$i];
				$ExecutedQuery= mysql_query($qr[$i], $dbCon);
				if(!$ExecutedQuery)
				{
					return false;
				}
			}
			return true;
		}
		public function lastError($dbConn)
		{
			return '<b>Error No.:</b> '.mysql_errno($dbConn).'<br><b>Error Message:</b> '.mysql_error($dbConn);
		}
		public function verifyTable($dbConn, $table, $schema)
		{
			return @mysql_query("select * from ".$table['name']." limit 1", $dbConn);
		}
		public function dropTable($dbConn, $tb, $schemaName)
		{
			return @mysql_query("drop table ".$table['name'], $dbConn);
		}
		public function dropField($dbConn, $tb, $schemaName, $col)
		{
			$qr= "alter table ".$tb['name']." drop column ".$col['name'];
			//echo $qr;
			return @mysql_query($qr, $dbConn);
		}
		public function addField($dbConn, $tb, $schemaName, $col)
		{
			return @mysql_query("alter table ".$tb['name']." add column ". utf8_decode($col['query']), $dbConn);
		}
		public function createDesconnection()
		{
			return  "mysql_close(<query>)";
		}
		public function fetchArray()
		{
			return "mysql_fetch_array(<source>)";
		}
		public function createDefaultValue()
		{
			return "default <defaultvalue>";
		}
		public function createQuery()
		{
			return "mysql_query(<query>)";
		}
		public function createSchema()
		{
			return "";
		}
		public function createField()
		{
			return "<element><fieldname></element> <fieldtype> <allownull> <serialvalue>";
		}
		public function createFieldComment()
		{
			return "";
		}
		public function createTableComment()
		{
			return "";
		}
		public function createFK()
		{
			return "<constructor>FOREIGN KEY</constructor>(<element><foreignkey></element>) <obj>REFERENCES</obj> <element><references>(<primarykeys>)</element>";
		}
		public function defaultPrimaryKey()
		{
			return "integer(8, NULL, auto_increment)";
		}
		public function createPK()
		{
			return "<obj>PRIMARY KEY</obj>(<element><primarykeys></element>)";
		}
		public function createTable()
		{
			return "	<mindComment>/* SQL: table <tablename> */</mindComment>
<constructor>CREATE</constructor> <obj>TABLE</obj> <element><tablename></element>
<element>(</element>
<fieldnames>
<element>)</element>";
		}
	}
?>