<?php
namespace en;

require_once dirname(__FILE__) . '/../../../../../mind3rd/API/interfaces/inflection.php';
require_once dirname(__FILE__) . '/../../../../../mind3rd/API/languages/en/Inflect.php';

/**
 * Test class for Inflect.
 * Generated by PHPUnit on 2010-11-06 at 23:55:39.
 */
class InflectTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Inflect
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Inflect;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	public function testisSingular() {
		$this->assertTrue(Inflect::isSingular('man'));
	}

	public function testisSingular2() {
		$this->assertFalse(Inflect::isSingular('men'));
	}
	public function testisSingular3() {
		$this->assertTrue(Inflect::isSingular('car'));
	}
	public function testisSingular4() {
		$this->assertFalse(Inflect::isSingular('houses'));
	}
	public function testisSingular5() {
		$this->assertFalse(Inflect::isSingular('mice'));
	}
	public function testisSingular6() {
		$this->assertTrue(Inflect::isSingular('train'));
	}
	public function testisSingular7() {
		$this->assertTrue(Inflect::isSingular('kid'));
	}
	public function testisSingular8() {
		$this->assertFalse(Inflect::isSingular('children'));
	}
	public function testisSingular9() {
		$this->assertFalse(Inflect::isSingular('penalties'));
	}
	public function testisSingular10() {
		$this->assertTrue(Inflect::isSingular('penalty'));
	}
	
	public function testToPlural() {
		$this->assertEquals(Inflect::toPlural('man'), 'men');
	}
	public function testToPlural1() {
		$this->assertEquals(Inflect::toPlural('person'), 'people');
	}
	public function testToPlural2() {
		$this->assertEquals(Inflect::toPlural('hotel'), 'hotels');
	}
	public function testToPlural3() {
		$this->assertEquals(Inflect::toPlural('wolf'), 'wolves');
	}
	public function testToPlural4() {
		$this->assertEquals(Inflect::toPlural('motor'), 'motors');
	}
	public function testToPlural5() {
		$this->assertEquals(Inflect::toPlural('robot'), 'robots');
	}
	public function testToPlural6() {
		$this->assertEquals(Inflect::toPlural('penalty'), 'penalties');
	}
	
	public function testToSingular() {
		$this->assertEquals(Inflect::toSingular('women'), 'woman');
	}
	public function testToSingular1() {
		$this->assertEquals(Inflect::toSingular('fishes'), 'fish');
	}
	public function testToSingular2() {
		$this->assertEquals(Inflect::toSingular('barrels'), 'barrel');
	}
	public function testToSingular3() {
		$this->assertEquals(Inflect::toSingular('trains'), 'train');
	}
	public function testToSingular4() {
		$this->assertEquals(Inflect::toSingular('notebooks'), 'notebook');
	}
	public function testToSingular5() {
		$this->assertEquals(Inflect::toSingular('penalties'), 'penalty');
	}
	/*public function testToSingular6() {
		$this->assertEquals(Inflect::toPlural('nerves'), 'nerve');
	}*/
	public function testToSingular7() {
		$this->assertEquals(Inflect::toSingular('nurses'), 'nurse');
	}
}
?>