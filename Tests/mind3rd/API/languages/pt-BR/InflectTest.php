<?php

require_once dirname(__FILE__) . '/../../../../../mind3rd/API/languages/pt-BR/Inflect.php';

/**
 * Test class for Inflect.
 * Generated by PHPUnit on 2010-11-06 at 23:55:39.
 */
class InflectTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Inflect
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Inflect;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	public function testIs_singular() {
		$this->assertTrue(Inflect::is_singular('homem'));
		$this->assertFalse(Inflect::is_singular('homens'));
		$this->assertFalse(Inflect::is_singular('caminhões'));
		$this->assertTrue(Inflect::is_singular('caminhão'));
		$this->assertFalse(Inflect::is_singular('pães'));
		$this->assertTrue(Inflect::is_singular('pão'));
		$this->assertFalse(Inflect::is_singular('carros'));
		$this->assertTrue(Inflect::is_singular('atlas'));
	}

	public function testToPlural() {
		$this->assertEquals(Inflect::toPlural('homem'), 'homens');
		$this->assertEquals(Inflect::toPlural('caminhão'), 'caminhões');
		$this->assertEquals(Inflect::toPlural('pão'), 'pães');
		$this->assertEquals(Inflect::toPlural('carro'), 'carros');
		$this->assertEquals(Inflect::toPlural('átlas'), 'átlas');
		$this->assertEquals(Inflect::toPlural('óculos'), 'óculos');
		$this->assertEquals(Inflect::toPlural('peão'), 'peões');
		$this->assertEquals(Inflect::toPlural('aluna'), 'alunas');
	}

	public function testToSingular() {
		$this->assertEquals(Inflect::toSingular('homens'), 'homem');
		$this->assertEquals(Inflect::toSingular('caminhões'), 'caminhão');
		$this->assertEquals(Inflect::toSingular('pães'), 'pão');
		$this->assertEquals(Inflect::toSingular('carros'), 'carro');
		$this->assertEquals(Inflect::toSingular('átlas'), 'átlas');
		$this->assertEquals(Inflect::toSingular('óculos'), 'óculos');
		$this->assertEquals(Inflect::toSingular('peões'), 'peão');
		$this->assertEquals(Inflect::toSingular('alunas'), 'aluna');
	}

	public function testToFemale() {
		$this->assertEquals(Inflect::toFemale('aluno'), 'aluna');
		$this->assertEquals(Inflect::toFemale('réu'), 'ré');
		$this->assertEquals(Inflect::toFemale('gato'), 'gata');
		$this->assertEquals(Inflect::toFemale('leão'), 'leoa');
		$this->assertEquals(Inflect::toFemale('chorão'), 'chorona');
		$this->assertEquals(Inflect::toFemale('mestre'), 'mestra');
		$this->assertEquals(Inflect::toFemale('doutor'), 'doutora');
	}

	/**
	 * @todo Implement testToMale().
	 */
	public function testToMale() {
		$this->assertEquals(Inflect::toMale('aluna'), 'aluno');
		$this->assertEquals(Inflect::toMale('ré'), 'réu');
		$this->assertEquals(Inflect::toMale('gata'), 'gato');
		$this->assertEquals(Inflect::toMale('leoa'), 'leão');
		$this->assertEquals(Inflect::toMale('chorona'), 'chorão');
		$this->assertEquals(Inflect::toMale('mestra'), 'mestre');
		$this->assertEquals(Inflect::toMale('doutora'), 'doutor');
	}

	/**
	 * @todo Implement testIsFemale().
	 */
	public function testIsFemale() {
		$this->assertTrue(Inflect::isFemale('mulher'));
		$this->assertTrue(Inflect::isFemale('freira'));
		$this->assertTrue(Inflect::isFemale('casa'));
		$this->assertTrue(Inflect::isFemale('ré'));
		$this->assertFalse(Inflect::isFemale('réu'));
		$this->assertTrue(Inflect::isFemale('amorosa'));
		$this->assertFalse(Inflect::isFemale('campeão'));
		$this->assertFalse(Inflect::isFemale('chapél'));
		$this->assertTrue(Inflect::isFemale('chorona'));
		$this->assertTrue(Inflect::isFemale('pequenininha'));
	}

}

?>
