<?php
	class PostgreSQL implements dbmsInterface
	{
		public $attType= Array();
		public function __construct()
		{
			$this->attType= Array();
			$this->defaultPort= '5432';
			$this->attType['key']		= "int8 default nextval(<mind_simpleQuoting><schemaname>.<tablename>_seq</mind_simpleQuoting>)";
			$this->attType['varchar']	= "varchar(<length>)";
			$this->attType['char']		= "char(<length>)";
			$this->attType['text']		= "text";
			$this->attType['date']		= "timestamp";
			$this->attType['blob']		= "bytea";
			$this->attType['integer']	= "integer";
			$this->attType['bigint']	= "int8";
			$this->attType['smallint']	= "int2";
			$this->attType['int']		= "int4";
			$this->attType['time']		= "timestamp";
			$this->attType['dateTime']	= "timestamp";
			$this->attType['float']		= "float";
			$this->attType['boolean']	= "boolean";
			$this->attType['serial']	= "serial";
		}
		
		function getLastError($dbConn)
		{
			return '<b>Error Message:</b> '.pg_last_error($dbConn);
		}
		function connectTo($ob)
		{
			$connection = "host=".$ob->host."  port=".$ob->port." dbname='".$ob->name."'  user='".$ob->user."' password='".$ob->pwd."'";
			$connect = pg_connect($connection);
			return $connect;
		}
		function disconnectFrom($dbCon)
		{
			$connect = pg_close($dbCon);
			return $connect;
		}
		function tableExists($dbConn, $table)
		{
			return @pg_query($dbConn, "select * from ".$table." limit 1");
		}
		
		/**/
		
		public function getHeader()
		{
			return "<mindComment>/*####################################################</mindComment>
<mindComment>#   Generated by Mind ".(date('H:i m/d/Y'))."               #</mindComment>
<mindComment>#   Generate PostreSQL DataBase SQLs                 #</mindComment>
<mindComment>######################################################*/</mindComment>

";
		}
		
		public function establishConnection()
		{
			return "function connectToPostgres(){
						\$db= '<dbname>';
						\$user= '<user>';
						\$pwd= '<pwd>';
						\$connection = \"host=<host>  port=<port> dbname='\$db'  user='\$user' password='\$pwd'\";
						\$connect = pg_connect(\$connection);
						return \$connect;
					}";
		}
		public function query($dbCon, $qr)
		{
			return pg_query($dbCon, $qr);
		}
		public function closeConnection()
		{
			return  "pg_close(<query>)";
		}
		public function fetchArray()
		{
			return "pg_fetch_array(<source>)";
		}
		function lastError()
		{
			return 'pg_last_error(<source>)';
		}
		public function dropField()
		{
			return "pg_query(<source>, 'alter table <table> drop column <column>'));";
		}
		public function addField()
		{
			return "pg_query(<source>, 'alter table <table> add column <column>'));";
		}
		public function dropTable()
		{
			return "pg_query(<source>, 'drop table <table>'));";
		}
		public function setDefaultValue()
		{
			return "default <defaultvalue>";
		}
		public function queryCommand()
		{
			return "pg_query(<query>)";
		}
		public function createFieldComment()
		{
			return "<constructor>COMMENT ON</constructor> <element>COLUMN</element> <schemaname>.<tablename>.<fieldname> <constructor>is</constructor> '<fieldComment>';";
		}
		public function createField()
		{
			return "<element><fieldname></element> <fieldtype> <allownull> <defaultvalue>";
		}
		public function createFK()
		{
			//return "<constructor>FOREIGN KEY</constructor>(<element><foreignkey></element>) <obj>REFERENCES</obj> <element><schemaname>.<references></element>";
			return "<constructor>ALTER TABLE</constructor> <objTable><table></objTable> <obj>ADD CONSTRAINT</obj> <table>_<references> <obj>FOREIGN KEY<obj> <element><fk></element> <obj>REFERENCES</obj> <objTable><references></objTable> MATCH FULL;";
		}
		public function addFK()
		{
			return "<constructor>FOREIGN KEY</constructor>(<element><foreignkey></element>) <obj>REFERENCES</obj> <element><references></element>";
		}
		public function defaultPrimaryKey()
		{
			return "integer(8, nextval('<schemaname>.<tablename>_seq'), <obj>unique</obj>, <obj>not null</obj>)";
		}
		public function createPK()
		{
			return "<constructor>PRIMARY KEY</constructor>(<element><pk></element>)";
		}
		public function createTable()
		{
			return "	<mindComment>/* DDL: table <tablename> */</mindComment>
<constructor>CREATE</constructor> <obj>SEQUENCE</obj> <tablename>_seq;
<constructor>CREATE</constructor> <obj>TABLE</obj> <objTable><tablename></objTable>
<element>(</element>
<fields>
<element>)</element>;";
		}
	}
?>